import { ActionConfig, ActionType } from "./applicantActionTypes";
import {
  acceptApplicantAction,
  deleteApplicantById,
  denyApplicantAction,
  moveApplicantToApplyingAction,
  moveApplicantToOnboardingAction,
  moveApplicantToTestingAction,
  passApplicantTestAction,
} from "../../_service/action";
import {
  sendDenyEmailForConfig,
  sendFailedTestEmailForConfig,
  sendOnboardingReminderForConfig,
  sendPassedTestEmailForConfig,
  sendTestReminderForConfig,
} from "../../_service/emailAction";

export const ACTION_CONFIG: Record<ActionType, ActionConfig> = {
  applying: {
    action: moveApplicantToApplyingAction,
    successTitle: "Applicant Moved",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been moved to applying.`,
    errorMessage: "Failed to move applicant to applying. Please try again later.",
    requiresConfirmation: true,
    confirmTitle: "Move to Applying",
    confirmDescription: "Are you sure you want to move this applicant to applying?",
  },
  testing: {
    action: moveApplicantToTestingAction,
    successTitle: "Applicant Moved",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been moved to testing.`,
    errorMessage: "Failed to move applicant to testing. Please try again later.",
    requiresConfirmation: true,
    confirmTitle: "Move to Testing",
    confirmDescription: "Are you sure you want to move this applicant to testing?",
  },
  onboarding: {
    action: moveApplicantToOnboardingAction,
    successTitle: "Applicant Moved",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been moved to onboarding.`,
    errorMessage: "Failed to move applicant to onboarding. Please try again later.",
    requiresConfirmation: true,
    confirmTitle: "Move to Onboarding",
    confirmDescription: "Are you sure you want to move this applicant to onboarding?",
  },
  pass: {
    action: passApplicantTestAction,
    successTitle: "Test Passed",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has passed the test.`,
    errorMessage: "Failed to mark test as passed. Please try again later.",
    emailAction: sendPassedTestEmailForConfig,
    requiresConfirmation: true,
    confirmTitle: "Pass Test",
    confirmDescription: "Are you sure you want to mark this test as passed?",
  },
  accept: {
    action: acceptApplicantAction,
    successTitle: "Applicant Accepted",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been accepted.`,
    errorMessage: "Failed to accept applicant. Please try again later.",
    emailAction: sendPassedTestEmailForConfig,
    requiresConfirmation: true,
    confirmTitle: "Accept Applicant",
    confirmDescription: "Are you sure you want to accept this applicant?",
  },
  deny: {
    action: denyApplicantAction,
    successTitle: "Applicant Denied",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been denied.`,
    errorMessage: "Failed to deny applicant. Please try again later.",
    emailAction: sendDenyEmailForConfig,
    requiresConfirmation: true,
    confirmTitle: "Deny Applicant",
    confirmDescription: "Are you sure you want to deny this applicant?",
    variant: "destructive",
  },
  fail: {
    action: denyApplicantAction,
    successTitle: "Test Failed",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has failed the test.`,
    errorMessage: "Failed to mark test as failed. Please try again later.",
    emailAction: sendFailedTestEmailForConfig,
    requiresConfirmation: true,
    confirmTitle: "Fail Test",
    confirmDescription: "Are you sure you want to mark this test as failed?",
    variant: "destructive",
  },
  delete: {
    action: deleteApplicantById,
    successTitle: "Applicant Deleted",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been deleted.`,
    errorMessage: "Failed to delete applicant. Please try again later.",
    requiresConfirmation: true,
    confirmTitle: "Delete Applicant",
    confirmDescription: "Are you sure you want to delete this applicant? This action cannot be undone.",
    variant: "destructive",
  },
  denied: {
    action: denyApplicantAction,
    successTitle: "Applicant Denied",
    successMessage: (firstName, lastName) => `${firstName} ${lastName} has been denied.`,
    errorMessage: "Failed to deny applicant. Please try again later.",
    emailAction: sendDenyEmailForConfig,
    requiresConfirmation: true,
    confirmTitle: "Deny Applicant",
    confirmDescription: "Are you sure you want to deny this applicant?",
    variant: "destructive",
  },
  remindToTakeTest: {
    action: () => Promise.resolve(),
    successTitle: "Reminder Sent",
    successMessage: (firstName, lastName) => `Test reminder sent to ${firstName} ${lastName}.`,
    errorMessage: "Failed to send test reminder. Please try again later.",
    emailAction: sendTestReminderForConfig,
    requiresConfirmation: true,
    confirmTitle: "Send Test Reminder",
    confirmDescription: "Are you sure you want to send a test reminder to this applicant?",
  },
  remindToOnboarding: {
    action: () => Promise.resolve(),
    successTitle: "Reminder Sent",
    successMessage: (firstName, lastName) => `Onboarding reminder sent to ${firstName} ${lastName}.`,
    errorMessage: "Failed to send onboarding reminder. Please try again later.",
    emailAction: sendOnboardingReminderForConfig,
    requiresConfirmation: true,
    confirmTitle: "Send Onboarding Reminder",
    confirmDescription: "Are you sure you want to send an onboarding reminder to this applicant?",
  },
  viewDetails: {
    action: () => Promise.resolve(),
    successTitle: "Details Viewed",
    successMessage: (firstName, lastName) => `Viewing details for ${firstName} ${lastName}.`,
    errorMessage: "Failed to view details. Please try again later.",
    requiresConfirmation: false,
    confirmTitle: "View Details",
    confirmDescription: "View applicant details",
  },
};